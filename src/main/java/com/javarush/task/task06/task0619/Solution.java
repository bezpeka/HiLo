package com.javarush.task.task06.task0619;

/*
Три статические переменные name
Добавь 3 public статических переменных: String Solution.name, String Cat.name, String Dog.name.
//TODO хорошо написано про модификаторы доступа public и static
Тут надо понимать, что это за слово такое - static.
В контексте java его (частично!) можно перевести как "Один на всех".
Это значит, что для класса Dog например
public String name;
 означает, что у каждой созданной вами собаки есть свое собственное имя.
а вот
public static String name;
 означает, что это не собственное имя каждой собаки, а "одно на всех", "общее для всех собак",
 "сделанное еще до создания первой собаки, даже если никаких собак и не будет".
Например, это может быть имя по умолчанию для безымянных собак. Или это имя собачника главного
или главной собаки в упряжке или что-то еще нужное для всего класса сразу.

Так вот, это слово static применимо только внутри класса, т.е. когда создаются объекты.
Для переменных внутри метода (а это означает, что переменная доступна только внутри этого метода)
эта логика неприменима. Что мы захотели бы сказать, написав static перед переменной метода
(main - это метод, пусть и специфичный)? Что она одна и общая для чего? Для всех вызовов этого метода?
Что она создается до вызова метода и даже если этот метод не вызывался ни разу?
Так эта переменная сразу становится не переменной метода, а переменной класса да и все,
не надо ничего дополнительно  изобретать.
Поэтому слово static внутри метода - ошибка.

Для static методов и static классов примерно такая же логика, тоже перевод "один на всех"
в какой-то степени применим (для методов так прямо очень, они в этом аспекте сильно похожи на переменные,
с классами все посложнее).

по факту мы имеем переменные:
Solution.name
Cat.name
Dog.name
*/

public class Solution {
    public static String name;

    public static class Cat {
        public static String name;
    }

    public static class Dog {
        public static String name;
    }

    public static void main (String[] args) {

    }
}